"Pathogen
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

runtime! plugin/sensible.vim

"=========================================
"
"       VIM itself
"
"=========================================

"Auto reload vimrc
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" saved/loaded info
set viminfo=%,'10,f1,/20,:64,n~/.viminfo
"           | |   |  |   |   > viminfo file location
"           | |   |  |   > command history
"           | |   |  > search history
"           | |   > save global marks ('file bookmarks')
"           | > files for which to save marks
"           > buffer list (open files)


"=========================================
"
"       STYYYYYYLE
"
"=========================================

"Terminal Coloring
if &term =~ '256color'
    " disable Background Color Erase (BCE) so that color schemes
    "     " render properly when inside 256-color tmux and GNU screen.
    set t_ut=
endif

"Syntax coloring
"----------
syntax on
colorscheme Tomorrow-Night
"colorscheme Tomorrow-Night-Eighties
"colorscheme desert
"colorscheme onedark
"colorscheme brogrammer
"colorscheme jellybeans
"colorscheme apprentice
"colorscheme wombat256mod
"colorscheme seoul256
"colorscheme obsidian

"au BufEnter * exec 'colorscheme '.(&ft=='xml' ? 'Tomorrow-Night' : 'Tomorrow-Night-Eighties')
"au BufEnter * exec 'colorscheme '.(&ft=='cpp' ? 'Tomorrow-Night' : 'Tomorrow-Night-Eighties')

"Set line numbers
set number

"Indentation
"----------
"set autoindent
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
"set backspace=indent,eol,start 

"Display
"----------
"set laststatus=2
set statusline='%F%m%r%h%w\ (%{&ff}){%Y}\ [%l,%v][%p%%]'

"Highlight @ column=100
"----------
highlight ColorColumn ctermbg=darkgray
set colorcolumn=100


"=========================================
"
"       USAGE
"
"=========================================

"Searching
"----------
set ignorecase
set hlsearch
"set incsearch

"Spellcheck
"set spelllang=en

"Timeouts - account for annoying delays in nested tmux
"----------
set timeoutlen=500
set ttimeoutlen=0

"Folding
"----------
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" escape insert mode
inoremap ,, <Esc>

" change leader key
let mapleader = ","


"=========================================
"
"       PLUGINS
"
"=========================================

"Syntastic
"------------
let g:syntastic_quiet_messages = { 'type': 'style' }
let g:syntastic_python_checkers = ['prospector', 'flake8']
let g:syntastic_mode_map = { 'mode': 'active' }
"let g:syntastic_mode_map = { 
"    \ 'mode': 'active',
"    \ 'active_filetypes': [],
"    \ 'passive_filetypes': [] 
"    \ }

"neocomplete
"------------------------------------------------------------------------
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

        " Define keyword.
        if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
        endif
        let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    "set completeopt+=longest
    "let g:neocomplete#enable_auto_select = 1
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
    endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'


" disable preview window for completion
set completeopt-=preview
"------------------------------------------------------------------------neocomplete


" incsearch
" ---------------------------------------
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" easymotion + incsearch
" ---------------------------------------
map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)

" Ctags
" --------------------------
nnoremap <Leader>p :CtrlPTag<CR>
nmap <Leader>. :CtrlPTag<CR><C-\>w
nnoremap <silent> <Leader>b :TagbarToggle<CR>
set tags=./.tags,.tags;$HOME

" CtrlP
" --------------------------
let g:ctrlp_root_markers=".tags"


"=========================================
"
"       CUSTOM COMMANDS
"
"=========================================

"  Run a shell command and show the results in a separate window
" --------------------------
function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)


" lint python
" --------------------------
command! Flake  % !python3 -m pyflakes
command! Flake2 % !python2 -m pyflakes


" pretty-print json
command! Jsonify % !python -m json.tool

" open pdf
" --------------------------
:command! -complete=file -nargs=1 Openpdf :r !pdftotext -nopgbrk <q-args> - |fmt -csw78

"  Jinja templates
" --------------------------
"  Convert 'command' to '{% command %}'
command! Jinjafy :normal I {% <Esc>A %} <Esc>
"nnoremap jn :Jinjafy<CR>


"=========================================
"
"       TOOL MACROS
"
"=========================================

"  Rust
" --------------------------
nnoremap mc :Shell cargo check <CR>
nnoremap mr :Shell cargo run <CR>
nnoremap mb :Shell cargo build <CR>


" Grep-ing
" --------------------------
"nnoremap Gr :grep <cword> %:p:h/*<CR>
"nnoremap GR :grep '\b<cword>\b' %:p:h/*<CR>
nnoremap gr :grep -r <cword> *<CR>
nnoremap gR :grep -r '\b<cword>\b' *<CR>


"=========================================
"
"       Resizing and Movement
"
"=========================================
nnoremap <Leader>h :vertical resize -10<CR>
nnoremap <Leader>l :vertical resize +10<CR>
nnoremap <Leader>j :vertical resize -10<CR>
nnoremap <Leader>k :vertical resize +10<CR>

